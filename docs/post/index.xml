<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on beats blog</title>
    <link>https://s-beats.github.io/post/</link>
    <description>Recent content in Posts on beats blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 10 Sep 2022 08:32:36 +0900</lastBuildDate><atom:link href="https://s-beats.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Postman v10 が発表された</title>
      <link>https://s-beats.github.io/post/postman-v10-%E3%81%8C%E7%99%BA%E8%A1%A8%E3%81%95%E3%82%8C%E3%81%9F/</link>
      <pubDate>Sat, 10 Sep 2022 08:32:36 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/postman-v10-%E3%81%8C%E7%99%BA%E8%A1%A8%E3%81%95%E3%82%8C%E3%81%9F/</guid>
      <description>Postman v10 のリリースが発表されました。 https://blog.postman.com/announcing-postman-v10/
面白そうなアップデートが結構あったので、内容を簡単にまとめてみます。
   Postman CLI   Postman と同じランタイムで実行される。 Newman の基盤の上に乗っている。 https://blog.postman.com/introducing-the-postman-cli-to-automate-your-api-testing/  自動APIテストとかに使えるかも。
   gRPC サポート   GraphQL に続き gRPC がサポートされた。 gRPC のURLをURLバーに打ち込むだけで、使えるメソッドをセットしてくれる。  サーバーリフレクションというらしいんだけど、サーバーに問い合わせて使えるメソッドを取得しているのかな？   https://blog.postman.com/postman-v10-and-grpc-what-you-can-do/  重い腰を上げて gRPC を始める機が熟したか&amp;hellip;。
   パートナーワークスペース   チーム外のメンバーを招待できるようになった。 権限を絞ったり、特定のワークスペースにのみアクセスを許可するなどの制御ができる。  これらを管理する新しいロールができた。   https://blog.postman.com/introducing-partner-workspaces/  「チームに入れるとコストが気になるけど、同じワークスペースは使ってほしい業務委託メンバーが複数人いる」みたいなケースで嬉しいかな？
   API Security   セキュリティルールに違反してしないかをチェックできる。 定義だけじゃなくてリクエストもチェックしてくれる。 Postman が提供してくれるルールをON/OFFして設定する。 https://blog.postman.com/introducing-api-security-in-postman-v10/  API 定義のレビューってミスを見逃しがちな気がするから良いかも。 というかそもそも脆弱な定義とか全然知らないからこれを使って学んでいきたい。</description>
    </item>
    
    <item>
      <title>GWに作ったツール</title>
      <link>https://s-beats.github.io/post/gw%E3%81%AB%E4%BD%9C%E3%81%A3%E3%81%9F%E3%83%84%E3%83%BC%E3%83%AB/</link>
      <pubDate>Sat, 07 May 2022 22:37:49 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/gw%E3%81%AB%E4%BD%9C%E3%81%A3%E3%81%9F%E3%83%84%E3%83%BC%E3%83%AB/</guid>
      <description>今回のGW期間で作ったツールを雑に列挙する。
   idgen  ダミーのUUIDとかULID欲しいなーって時にコマンド打ち込むだけで出力してくれるツールを作った。
個人開発の中で結構使ってて気に入っている。
いずれはVersion指定とかもできたらいいかなと思っている。
https://github.com/s-beats/idgen
   ssmparam  https://github.com/aws/aws-sdk-go の SSM のAPIの薄いラッパーを作った。
~Inputと~Outputの形の構造体を扱うのが面倒な時があったのがモチベーションである。
ユースケースを絞りすぎている感はあるけど割と気に入っている。 簡素な作りだけど開発自体は楽しかった。
https://github.com/s-beats/ssmparam
   まとめ  やっぱり開発って楽しい。
最近はWEBアプリとかを作るよりも便利ツールやライブラリを作ることに喜びを感じます。</description>
    </item>
    
    <item>
      <title>DosとDDosの違い</title>
      <link>https://s-beats.github.io/post/dos%E3%81%A8ddos%E3%81%AE%E9%81%95%E3%81%84/</link>
      <pubDate>Sun, 10 Apr 2022 08:12:54 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/dos%E3%81%A8ddos%E3%81%AE%E9%81%95%E3%81%84/</guid>
      <description>何回も調べている気がするのでメモしておく。
DosはDenial-of-service attackの略なので、サービスを妨害する攻撃を指す。 DDosはDistributed Denial-of-service attackの略なので、分散された攻撃元(システムかマシンか何かと解釈)からサービスを妨害する攻撃を指す。
   参考   https://ja.wikipedia.org/wiki/DoS%E6%94%BB%E6%92%83  </description>
    </item>
    
    <item>
      <title>パスワードクラック</title>
      <link>https://s-beats.github.io/post/%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%AF%E3%83%A9%E3%83%83%E3%82%AF/</link>
      <pubDate>Wed, 30 Mar 2022 08:43:48 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%AF%E3%83%A9%E3%83%83%E3%82%AF/</guid>
      <description>   パスワードクラックとは？   パスワードを破ること オンライン攻撃→実際にログインを試みる オフライン攻撃→パスワードが書いてあるファイルを入手して、ローカルで解読する     手法   辞書  よく使われるワードがたくさん記録されたファイルを使って、順番に試す   総当たり  文字数、文字の種類から考えうるパターンを試す   レインボーテーブル  ハッシュ値から元の文字列への逆引き表を使って解読する    </description>
    </item>
    
    <item>
      <title>NOTICE</title>
      <link>https://s-beats.github.io/post/notice/</link>
      <pubDate>Mon, 03 Jan 2022 08:14:10 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/notice/</guid>
      <description>   NOTICEとは  サイバー攻撃に利用されるおそれのあるIoT機器の調査をして、 該当する機器の利用者へ注意喚起を行う取り組みを指す。
総務省、国立研究開発法人情報通信機構（NICT）及びISPが連携して、実施される。
   取り組みフロー  実施される取り組みの大まかなフローは以下である。
 NICTがIoT機器（ルータ、ウェブカメラ等）に、容易に推測されるパスワードを入力して調査 調査結果をISPに情報提供 ISPから利用者に注意喚起（メール、郵送等） 利用者がNOTICEサポートセンター（総務省が設置）に問い合わせユーザサポートを受けて、設定の変更等の適切な対策を実施（パスワード設定、ファームウェア更新等）     まとめ   NICTが攻撃に利用されるIoT機器の調査し、ISPを通じて注意喚起 利用者がユーザサポートに問い合わせ、設定を変更     参考   https://notice.go.jp/  </description>
    </item>
    
    <item>
      <title>二要素認証と二段階認証</title>
      <link>https://s-beats.github.io/post/%E4%BA%8C%E8%A6%81%E7%B4%A0%E8%AA%8D%E8%A8%BC%E3%81%A8%E4%BA%8C%E6%AE%B5%E9%9A%8E%E8%AA%8D%E8%A8%BC/</link>
      <pubDate>Sun, 02 Jan 2022 08:42:04 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/%E4%BA%8C%E8%A6%81%E7%B4%A0%E8%AA%8D%E8%A8%BC%E3%81%A8%E4%BA%8C%E6%AE%B5%E9%9A%8E%E8%AA%8D%E8%A8%BC/</guid>
      <description>ごっちゃにして解釈されがちだし、自分もしていたのでまとめる。
   二要素認証とは  認証に二つの要素を使用する方式を指す。 このとき選択する要素は、知識、所有、生体の三つのうち二つである。
   二段階認証  認証の成立に二つの段階を要する方式を指す。
   違い  二要素認証 = 二段階認証 ではない！ パスワード認証成立→秘密の質問認証成立→認証成立といった場合は、二段階認証ではあるが知識要素しか用いていないため、二要素認証にはならない。 段階が一つでも、一度に二つの要素の認証を行う場合は、二要素認証となる。
認証時の段階の数を示すのが○段階認証であり、 認証に用いる要素数を示すのが○要素認証となる。</description>
    </item>
    
    <item>
      <title>RDS復習メモ</title>
      <link>https://s-beats.github.io/post/rds%E5%BE%A9%E7%BF%92%E3%83%A1%E3%83%A2/</link>
      <pubDate>Sat, 18 Dec 2021 12:00:24 +0900</pubDate>
      
      <guid>https://s-beats.github.io/post/rds%E5%BE%A9%E7%BF%92%E3%83%A1%E3%83%A2/</guid>
      <description>業務でRDSを使うことになったので再復習がてら雑なメモを残す。
   概要   マネージドRDBサービスである。 バックアップ、ハードのメンテナンス、障害時の復旧など面倒見てくれる。 エンジンは複数種類用意されている。     ストレージ   保存用ストレージにはEBSを使う。  汎用SSD、プロビジョンドIOPS SSD、マグネティックの三種から選択する。   高いIOPSが求められる際はプロビジョンドIOPS SSDを使う。 ストレージ拡張はダウンタイムなしで可能だが、拡張中は若干パフォーマンスが落ちる。     マルチAZ   二つのAZにDBインスタンスを配置可能である。 障害発生時やメンテナンスのダウンタイムを短縮して高い可用性を保てる。 片方のAZにはマスターDBインスタンス、もう片方にはスタンバイDBインスタンスが配置される。 マスターとスタンバイの同期レプリケーション(リアルタイムでの複製作成)により冗長化される。 マスターへの更新時に、同期レプリケーションが実行されて更新完了となる。 若干の遅延はあるが、数ms程度である。 フェイルオーバーが発生した際は、RDSのFQDNのDNSレコードがスタンバイ側IPに差し向けられる。  アプリケーション側でIPのキャッシュを持っている場合は、一時的に接続できなくなる。       リードレプリカ   参照専用のDBインスタンスである。 マスターのメンテナンス時も、参照は止めないという運用が可能となる。 マスターへの負荷を抑えられる。 マスターとのデータ同期は非同期レプリケーション方式で実行される。 書き込み時にパフォーマンスへの影響はないが、反映まで若干のタイムラグがある。     バックアップ   自動バックアップ可能である。  1日1回自動でDBスナップショットを取得する。 保持期間は最大35日である。 スナップショットを選択して新しいDB作成可能である。 稼働中のインスタンスにバックアップデータを置き換えることはできない。(新しく作るしかない)   手動スナップショットも可能である。  1リージョンあたり100個までという制限がある。 シングルAZの場合、短時間のI/O中断時間がある。(自動バックアップも) マルチAZの場合は、スタンバイからスナップショットを取るのでマスターへの影響はない。(I/Oのダウンタイムはない)       リストア   スナップショットを選んで新しいインスタンスを作成する。     ポイントインタイムリカバリー   直近5分前から最大35日前までの任意のタイミングの状態のDBインスタンスを作成可能である。 最大日数は自動バックアップの期間に準ずる。  自動バックアップ有効の場合のみポイントインタイムリカバリ可能である。       ネットワーク   VPC内に配置可能で、インターネット非公開にできる。 ほかのサービスからの通信はエンジンが提供するSSLを使った暗号化で守られる。     暗号化   暗号化有効にすることで、ストレージ 、スナップショット、ログなどを暗号化して保存できる。 途中から有効にすることはできない。 スナップショット暗号化コピーを作って、そのコピーからDBインスタンスを作成することで既存のデータを暗号化できる。     Aurora   AWS独自のエンジンで、ハイパフォーマンスである。 MySQL互換のエディション、PostgreSQL互換のエディションがある。     構成   インスタンスを作成すると、Auroraクラスタが作成される。 クラスタは、DBインスタンス、クラスタボリューム(ストレージ)で構成される。 ボリュームはSSDベースである。 クラスタボリュームは、単一リージョン内の3つのAZにあるそれぞれ2つのコピーで構成される。  自動で同期される。 自動で64TBまで拡張される。       レプリカ   マスタのマルチAZ構成はない。 クラスタ内のリードレプリカが、プライマリインスタンスに昇格することでフェイルオーバーを実現する。     エンドポイント   プライマリインスタンスへのエンドポイントはクラスタエンドポイントとなる。 リードレプリカへのエンドポイントは読み取りエンドポイントとなる。  複数のレプリカインスタンスがある場合は自動で負荷分散される。   インスタンスごとのエンドポイントはインスタンスエンドポイントとなる。 インスタンスエンドポイントをグルーピングして、カスタムエンドポイントを作成することも可能である。  </description>
    </item>
    
  </channel>
</rss>
